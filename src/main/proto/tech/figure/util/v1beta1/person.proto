syntax = "proto3";

package tech.figure.util;

option java_multiple_files = true;

import "tech/figure/util/v1beta1/address.proto";
import "tech/figure/util/v1beta1/options.proto";
import "tech/figure/util/v1beta1/types.proto";
import "validate/validate.proto";

/*
Name of a person.
 */
message Name {
  string first_name  = 1 [(tech.figure.util.pii) = true, (validate.rules).string.len = 1]; // Given name
  string last_name   = 2 [(tech.figure.util.pii) = true, (validate.rules).string.len = 1]; // Family name
  string middle_name = 3 [(tech.figure.util.pii) = true];
  string prefix      = 4 [(tech.figure.util.pii) = true];
  string suffix      = 5 [(tech.figure.util.pii) = true];
}

/*
Identifying information for a person.
 */
message Person {
  tech.figure.util.UUID id                            = 1 [(validate.rules).message.required = true];                             // Id for this person; may be referenced elsewhere in the model to link data to this individual
  string                party_type                    = 2;                                                                        // PRIMARY_BORROWER, COBORROWER, COSIGNER, etc.
  Name                  name                          = 3 [(validate.rules).message.required = true];                             // Name
  repeated Name         formerly_known_as             = 4;                                                                        // Populated if person has previous names or aliases (e.g. maiden name)
  tech.figure.util.Date dob                           = 5 [(tech.figure.util.pii) = true];                                        // Date of birth
  repeated tech.figure.util.PhoneNumber phone_numbers = 7;                                                                        // Contact phone numbers
  repeated tech.figure.util.Address addresses         = 8;                                                                        // E.g. residential address or mailing address
  string                            ssn               = 9 [(tech.figure.util.pii) = true];                                        // Social Security Number
  string                            email             = 10 [(tech.figure.util.pii) = true, (validate.rules).string.email = true]; // Email address
  string                            citizenship       = 11;                                                                       // Country of citizenship
  MaritalStatus                     marital_status    = 12;                                                                       // Marital status
  bool                              is_self_employed  = 13;                                                                       // True if individual is self-employed
}

enum MaritalStatus {
  MARITAL_STATUS_UNKNOWN = 0;
  SINGLE                 = 1 [(tech.figure.util.description) = "Unmarried"];
  MARRIED                = 2 [(tech.figure.util.description) = "Married / Spouse"];
  SEPARATED              = 3 [(tech.figure.util.description) = "Separated"];
  CIVIL_UNION            = 4 [(tech.figure.util.description) = "Civil Union"];
  DOMESTIC_PARTNERSHIP   = 5 [(tech.figure.util.description) = "Domestic Partnership"];
  OTHER                  = 6 [(tech.figure.util.description) = "Other"];
}

/*
The primary borrower of a loan, plus any co-borrowers or co-signers.

See `Person.party_type` to distinguish between borrower roles (e.g. primary vs co-borrower vs co-signer).
 */
message Borrowers {
  Person          primary    = 1; // The main individual responsible for the loan
  repeated Person additional = 2; // Co-borrowers and co-signers, if any
}